Ejercicio 1: Sumar puntos al jugador- if.
Pedir al usuario los puntos iniciales y los puntos ganados.
Si los puntos ganados son mayores a 100, mostrar un mensaje especial de "¡Gran puntuación!".
Mostrar el total.

Ejercicio 2: Calcular daño recibido- if.
Ingresar la vida actual del personaje y cuánto daño recibe.
Restar el daño a la vida.
Si la vida resultante es menor o igual a 0, mostrar “¡Has muerto!”.
Mostrar la vida resultante.

Ejercicio 3: Curar al personaje- if / else
Ingresar la vida actual y una cantidad de curación.
Sumar la curación a la vida.
Si la vida supera 100, mostrar "Vida máxima alcanzada".
Si es menor a 100, mostrar "Aún puedes curarte más".
Mostrar la vida resultante.

Ejercicio 4: Calcular experiencia necesaria para subir de nivel- if / else if / else
Ingresar el nivel actual del personaje y calcular cuánta experiencia necesita para el próximo nivel:

-Si el nivel es menor a 10, mostrar "Nivel bajo, necesitas 100 XP".

-Si el nivel está entre 10 y 19, mostrar "Nivel medio, necesitas 250 XP".

-Si el nivel es 20 o más, mostrar "Nivel alto, necesitas 500 XP".

Ejercicio 5: Multiplicar monedas recogidas por un multiplicador-  if / else if / else
Pedir cantidad de monedas recogidas y un multiplicador.

-Si el multiplicador es 1, mostrar “Sin bonificación”.

-Si es 2, mostrar “Bonificación x2 activa”.

-En cualquier otro caso, mostrar “Bonificación personalizada”.
Mostrar el total de monedas multiplicadas.

Ejercicio 6: Sistema simple de compra-  enumerador y switch
Definir un enum con tipos de objetos: ESPADA = 1, ESCUDO = 2, POTION = 3.
Pedir al usuario la cantidad de monedas y el tipo de objeto a comprar.
Usar un switch para restar el precio según el objeto:

-Espada cuesta 100

-Escudo cuesta 75

-Poción cuesta 25

Mostrar las monedas restantes.
Si no hay suficientes monedas, mostrar “No puedes comprar este objeto”.

Ejercicio 7: Crear una función que sume dos números- enumerador y switch
Crear una función Sumar(int a, int b) que devuelva el resultado.
Usar un enum con tipos de recursos: PUNTOS = 1, MONEDAS = 2, EXPERIENCIA = 3.
Pedir al usuario qué tipo de recurso quiere sumar y usar switch para mostrar un mensaje acorde:

“Has ganado puntos”

“Has ganado monedas”

“Has ganado experiencia”

Mostrar el total sumado.

Ejercicio 8: Crear una función que calcule daño- if
La función CalcularDanio(int ataque, int defensa) debe devolver ataque - defensa.
Si el resultado es menor o igual a cero, mostrar “El ataque fue inútil”.
Si es mayor a cero, mostrar “El enemigo recibió daño”.
Mostrar el valor del daño.

Ejercicio 9: Ingresar los stats del jugador y mostrarlos en pantalla-
Pedir al usuario que ingrese:

Nombre
Ataque
Defensa
Velocidad de ataque
Vida máxima
Multiplicador de daño crítico

Luego:

Si el multiplicador es mayor a 2, mostrar “Crítico alto”

Si es menor o igual a 1, mostrar “Crítico bajo”

Si está entre 1 y 2, mostrar “Crítico normal”
Mostrar todos los stats.

Ejercicio 10: Calcular tiempo total de juego -  if / else if / else
Pedir cuántos minutos jugó el jugador en tres días distintos.
Mostrar:

El total de minutos jugados

El promedio por día

Y el total en formato horas:minutos

Además:

Si jugó más de 10 horas totales, mostrar “Jugador muy activo”

Si jugó entre 5 y 10 horas, mostrar “Jugador regular”

Si jugó menos de 5 horas, mostrar “Jugador casual”

Ejercicio 11: Simulación de combate simple - Como quieran!
Crear un programa que pida:

Nombre, vida, ataque y defensa del jugador

Nombre, vida, ataque y defensa del enemigo

Luego:

Usar una función CalcularDanio para calcular:

Daño del jugador al enemigo = ataqueJugador - defensaEnemigo

Daño del enemigo al jugador = ataqueEnemigo - defensaJugador

Usar condicionales para asegurar que el daño no sea negativo (mínimo 0)

Restar los daños a las vidas

Mostrar todos los valores resultantes después del intercambio de ataques

Mostrar:

Vida inicial y final del jugador y del enemigo

Si algún personaje queda con vida menor o igual a 0, mostrar:

“Jugador derrotado”

“Enemigo derrotado”

Si ambos quedan vivos, mostrar “El combate continúa”

